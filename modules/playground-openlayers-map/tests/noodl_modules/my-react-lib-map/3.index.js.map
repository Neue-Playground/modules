{"version":3,"sources":["webpack:///./node_modules/geotiff/dist-module/predictor.js","webpack:///./node_modules/geotiff/dist-module/compression/basedecoder.js","webpack:///./node_modules/geotiff/dist-module/compression/jpeg.js"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","slice","b","applyPredictor","block","predictor","width","height","bitsPerSample","planarConfiguration","Error","byteLength","Uint8Array","Uint16Array","Uint32Array","concat","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","BaseDecoder","_createClass","_classCallCheck","_callee","fileDirectory","buffer","decoded","isTiled","tileWidth","tileHeight","_context","this","decodeBlock","Predictor","StripOffsets","TileWidth","ImageWidth","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration","_decode","arguments","apply","_next","_throw","_x","_x2","dctZigZag","Int32Array","buildHuffmanTable","codeLengths","k","code","children","q","j","decodeScan","data","initialOffset","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","mcusPerLine","progressive","startOffset","bitsData","bitsCount","readBit","nextByte","toString","decodeHuffman","tree","bit","node","receive","initialLength","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","component","decodeFunction","mcu","col","mcuCol","blockRow","blockCol","blocks","blocksPerLine","decodeFn","componentsLength","zz","huffmanTableDC","diff","pred","rs","huffmanTableAC","z","direction","marker","mcuExpected","blocksPerColumn","mcusPerColumn","usedResetInterval","_component","buildComponentData","lines","samplesPerLine","R","quantizeAndInverse","dataOut","dataIn","v0","v1","v2","v3","v4","v5","v6","v7","qt","quantizationTable","sample","scanLine","line","JpegStreamReader","jfif","adobe","quantizationTables","huffmanTablesAC","huffmanTablesDC","resetFrames","frames","readUint16","prepareComponents","componentId","maxH","maxV","Math","ceil","scanLines","blocksPerLineForMcu","blocksPerColumnForMcu","array","fileMarker","appData","subarray","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","extended","precision","componentsOrder","componentsCount","qId","quantizationIdx","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","tableSpec","successiveApproximation","processed","console","warn","cp","_i4","_Object$keys","outComponents","scaleX","scaleY","out","oi","x","JpegDecoder","_BaseDecoder","_this","_callSuper","reader","JPEGTables","parse","_inherits","getResult"],"mappings":"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","file":"3.index.js","sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n","import BaseDecoder from './basedecoder.js';\n\n/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/*\n   Copyright 2011 notmasteryet\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\nconst dctZigZag = new Int32Array([\n  0,\n  1, 8,\n  16, 9, 2,\n  3, 10, 17, 24,\n  32, 25, 18, 11, 4,\n  5, 12, 19, 26, 33, 40,\n  48, 41, 34, 27, 20, 13, 6,\n  7, 14, 21, 28, 35, 42, 49, 56,\n  57, 50, 43, 36, 29, 22, 15,\n  23, 30, 37, 44, 51, 58,\n  59, 52, 45, 38, 31,\n  39, 46, 53, 60,\n  61, 54, 47,\n  55, 62,\n  63,\n]);\n\nconst dctCos1 = 4017; // cos(pi/16)\nconst dctSin1 = 799; // sin(pi/16)\nconst dctCos3 = 3406; // cos(3*pi/16)\nconst dctSin3 = 2276; // sin(3*pi/16)\nconst dctCos6 = 1567; // cos(6*pi/16)\nconst dctSin6 = 3784; // sin(6*pi/16)\nconst dctSqrt2 = 5793; // sqrt(2)\nconst dctSqrt1d2 = 2896;// sqrt(2) / 2\n\nfunction buildHuffmanTable(codeLengths, values) {\n  let k = 0;\n  const code = [];\n  let length = 16;\n  while (length > 0 && !codeLengths[length - 1]) {\n    --length;\n  }\n  code.push({ children: [], index: 0 });\n\n  let p = code[0];\n  let q;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < codeLengths[i]; j++) {\n      p = code.pop();\n      p.children[p.index] = values[k];\n      while (p.index > 0) {\n        p = code.pop();\n      }\n      p.index++;\n      code.push(p);\n      while (code.length <= i) {\n        code.push(q = { children: [], index: 0 });\n        p.children[p.index] = q.children;\n        p = q;\n      }\n      k++;\n    }\n    if (i + 1 < length) {\n      // p here points to last code\n      code.push(q = { children: [], index: 0 });\n      p.children[p.index] = q.children;\n      p = q;\n    }\n  }\n  return code[0].children;\n}\n\nfunction decodeScan(data, initialOffset,\n  frame, components, resetInterval,\n  spectralStart, spectralEnd,\n  successivePrev, successive) {\n  const { mcusPerLine, progressive } = frame;\n\n  const startOffset = initialOffset;\n  let offset = initialOffset;\n  let bitsData = 0;\n  let bitsCount = 0;\n  function readBit() {\n    if (bitsCount > 0) {\n      bitsCount--;\n      return (bitsData >> bitsCount) & 1;\n    }\n    bitsData = data[offset++];\n    if (bitsData === 0xFF) {\n      const nextByte = data[offset++];\n      if (nextByte) {\n        throw new Error(`unexpected marker: ${((bitsData << 8) | nextByte).toString(16)}`);\n      }\n      // unstuff 0\n    }\n    bitsCount = 7;\n    return bitsData >>> 7;\n  }\n  function decodeHuffman(tree) {\n    let node = tree;\n    let bit;\n    while ((bit = readBit()) !== null) { // eslint-disable-line no-cond-assign\n      node = node[bit];\n      if (typeof node === 'number') {\n        return node;\n      }\n      if (typeof node !== 'object') {\n        throw new Error('invalid huffman sequence');\n      }\n    }\n    return null;\n  }\n  function receive(initialLength) {\n    let length = initialLength;\n    let n = 0;\n    while (length > 0) {\n      const bit = readBit();\n      if (bit === null) {\n        return undefined;\n      }\n      n = (n << 1) | bit;\n      --length;\n    }\n    return n;\n  }\n  function receiveAndExtend(length) {\n    const n = receive(length);\n    if (n >= 1 << (length - 1)) {\n      return n;\n    }\n    return n + (-1 << length) + 1;\n  }\n  function decodeBaseline(component, zz) {\n    const t = decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : receiveAndExtend(t);\n    component.pred += diff;\n    zz[0] = component.pred;\n    let k = 1;\n    while (k < 64) {\n      const rs = decodeHuffman(component.huffmanTableAC);\n      const s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          break;\n        }\n        k += 16;\n      } else {\n        k += r;\n        const z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n  }\n  function decodeDCFirst(component, zz) {\n    const t = decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n    component.pred += diff;\n    zz[0] = component.pred;\n  }\n  function decodeDCSuccessive(component, zz) {\n    zz[0] |= readBit() << successive;\n  }\n  let eobrun = 0;\n  function decodeACFirst(component, zz) {\n    if (eobrun > 0) {\n      eobrun--;\n      return;\n    }\n    let k = spectralStart;\n    const e = spectralEnd;\n    while (k <= e) {\n      const rs = decodeHuffman(component.huffmanTableAC);\n      const s = rs & 15;\n      const r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          eobrun = receive(r) + (1 << r) - 1;\n          break;\n        }\n        k += 16;\n      } else {\n        k += r;\n        const z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n  }\n  let successiveACState = 0;\n  let successiveACNextValue;\n  function decodeACSuccessive(component, zz) {\n    let k = spectralStart;\n    const e = spectralEnd;\n    let r = 0;\n    while (k <= e) {\n      const z = dctZigZag[k];\n      const direction = zz[z] < 0 ? -1 : 1;\n      switch (successiveACState) {\n        case 0: { // initial state\n          const rs = decodeHuffman(component.huffmanTableAC);\n          const s = rs & 15;\n          r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1) {\n              throw new Error('invalid ACn encoding');\n            }\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue; // eslint-disable-line no-continue\n        }\n        case 1: // skipping r zero items\n        case 2:\n          if (zz[z]) {\n            zz[z] += (readBit() << successive) * direction;\n          } else {\n            r--;\n            if (r === 0) {\n              successiveACState = successiveACState === 2 ? 3 : 0;\n            }\n          }\n          break;\n        case 3: // set value for a zero item\n          if (zz[z]) {\n            zz[z] += (readBit() << successive) * direction;\n          } else {\n            zz[z] = successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (zz[z]) {\n            zz[z] += (readBit() << successive) * direction;\n          }\n          break;\n        default:\n          break;\n      }\n      k++;\n    }\n    if (successiveACState === 4) {\n      eobrun--;\n      if (eobrun === 0) {\n        successiveACState = 0;\n      }\n    }\n  }\n  function decodeMcu(component, decodeFunction, mcu, row, col) {\n    const mcuRow = (mcu / mcusPerLine) | 0;\n    const mcuCol = mcu % mcusPerLine;\n    const blockRow = (mcuRow * component.v) + row;\n    const blockCol = (mcuCol * component.h) + col;\n    decodeFunction(component, component.blocks[blockRow][blockCol]);\n  }\n  function decodeBlock(component, decodeFunction, mcu) {\n    const blockRow = (mcu / component.blocksPerLine) | 0;\n    const blockCol = mcu % component.blocksPerLine;\n    decodeFunction(component, component.blocks[blockRow][blockCol]);\n  }\n\n  const componentsLength = components.length;\n  let component;\n  let i;\n  let j;\n  let k;\n  let n;\n  let decodeFn;\n  if (progressive) {\n    if (spectralStart === 0) {\n      decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n    } else {\n      decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    }\n  } else {\n    decodeFn = decodeBaseline;\n  }\n\n  let mcu = 0;\n  let marker;\n  let mcuExpected;\n  if (componentsLength === 1) {\n    mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n  } else {\n    mcuExpected = mcusPerLine * frame.mcusPerColumn;\n  }\n\n  const usedResetInterval = resetInterval || mcuExpected;\n\n  while (mcu < mcuExpected) {\n    // reset interval stuff\n    for (i = 0; i < componentsLength; i++) {\n      components[i].pred = 0;\n    }\n    eobrun = 0;\n\n    if (componentsLength === 1) {\n      component = components[0];\n      for (n = 0; n < usedResetInterval; n++) {\n        decodeBlock(component, decodeFn, mcu);\n        mcu++;\n      }\n    } else {\n      for (n = 0; n < usedResetInterval; n++) {\n        for (i = 0; i < componentsLength; i++) {\n          component = components[i];\n          const { h, v } = component;\n          for (j = 0; j < v; j++) {\n            for (k = 0; k < h; k++) {\n              decodeMcu(component, decodeFn, mcu, j, k);\n            }\n          }\n        }\n        mcu++;\n\n        // If we've reached our expected MCU's, stop decoding\n        if (mcu === mcuExpected) {\n          break;\n        }\n      }\n    }\n\n    // find marker\n    bitsCount = 0;\n    marker = (data[offset] << 8) | data[offset + 1];\n    if (marker < 0xFF00) {\n      throw new Error('marker was not found');\n    }\n\n    if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n      offset += 2;\n    } else {\n      break;\n    }\n  }\n\n  return offset - startOffset;\n}\n\nfunction buildComponentData(frame, component) {\n  const lines = [];\n  const { blocksPerLine, blocksPerColumn } = component;\n  const samplesPerLine = blocksPerLine << 3;\n  const R = new Int32Array(64);\n  const r = new Uint8Array(64);\n\n  // A port of poppler's IDCT method which in turn is taken from:\n  //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n  //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n  //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n  //   988-991.\n  function quantizeAndInverse(zz, dataOut, dataIn) {\n    const qt = component.quantizationTable;\n    let v0;\n    let v1;\n    let v2;\n    let v3;\n    let v4;\n    let v5;\n    let v6;\n    let v7;\n    let t;\n    const p = dataIn;\n    let i;\n\n    // dequant\n    for (i = 0; i < 64; i++) {\n      p[i] = zz[i] * qt[i];\n    }\n\n    // inverse DCT on rows\n    for (i = 0; i < 8; ++i) {\n      const row = 8 * i;\n\n      // check for all-zero AC coefficients\n      if (p[1 + row] === 0 && p[2 + row] === 0 && p[3 + row] === 0\n        && p[4 + row] === 0 && p[5 + row] === 0 && p[6 + row] === 0\n        && p[7 + row] === 0) {\n        t = ((dctSqrt2 * p[0 + row]) + 512) >> 10;\n        p[0 + row] = t;\n        p[1 + row] = t;\n        p[2 + row] = t;\n        p[3 + row] = t;\n        p[4 + row] = t;\n        p[5 + row] = t;\n        p[6 + row] = t;\n        p[7 + row] = t;\n        continue; // eslint-disable-line no-continue\n      }\n\n      // stage 4\n      v0 = ((dctSqrt2 * p[0 + row]) + 128) >> 8;\n      v1 = ((dctSqrt2 * p[4 + row]) + 128) >> 8;\n      v2 = p[2 + row];\n      v3 = p[6 + row];\n      v4 = ((dctSqrt1d2 * (p[1 + row] - p[7 + row])) + 128) >> 8;\n      v7 = ((dctSqrt1d2 * (p[1 + row] + p[7 + row])) + 128) >> 8;\n      v5 = p[3 + row] << 4;\n      v6 = p[5 + row] << 4;\n\n      // stage 3\n      t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = ((v2 * dctSin6) + (v3 * dctCos6) + 128) >> 8;\n      v2 = ((v2 * dctCos6) - (v3 * dctSin6) + 128) >> 8;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = ((v4 * dctSin3) + (v7 * dctCos3) + 2048) >> 12;\n      v4 = ((v4 * dctCos3) - (v7 * dctSin3) + 2048) >> 12;\n      v7 = t;\n      t = ((v5 * dctSin1) + (v6 * dctCos1) + 2048) >> 12;\n      v5 = ((v5 * dctCos1) - (v6 * dctSin1) + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[0 + row] = v0 + v7;\n      p[7 + row] = v0 - v7;\n      p[1 + row] = v1 + v6;\n      p[6 + row] = v1 - v6;\n      p[2 + row] = v2 + v5;\n      p[5 + row] = v2 - v5;\n      p[3 + row] = v3 + v4;\n      p[4 + row] = v3 - v4;\n    }\n\n    // inverse DCT on columns\n    for (i = 0; i < 8; ++i) {\n      const col = i;\n\n      // check for all-zero AC coefficients\n      if (p[(1 * 8) + col] === 0 && p[(2 * 8) + col] === 0 && p[(3 * 8) + col] === 0\n        && p[(4 * 8) + col] === 0 && p[(5 * 8) + col] === 0 && p[(6 * 8) + col] === 0\n        && p[(7 * 8) + col] === 0) {\n        t = ((dctSqrt2 * dataIn[i + 0]) + 8192) >> 14;\n        p[(0 * 8) + col] = t;\n        p[(1 * 8) + col] = t;\n        p[(2 * 8) + col] = t;\n        p[(3 * 8) + col] = t;\n        p[(4 * 8) + col] = t;\n        p[(5 * 8) + col] = t;\n        p[(6 * 8) + col] = t;\n        p[(7 * 8) + col] = t;\n        continue; // eslint-disable-line no-continue\n      }\n\n      // stage 4\n      v0 = ((dctSqrt2 * p[(0 * 8) + col]) + 2048) >> 12;\n      v1 = ((dctSqrt2 * p[(4 * 8) + col]) + 2048) >> 12;\n      v2 = p[(2 * 8) + col];\n      v3 = p[(6 * 8) + col];\n      v4 = ((dctSqrt1d2 * (p[(1 * 8) + col] - p[(7 * 8) + col])) + 2048) >> 12;\n      v7 = ((dctSqrt1d2 * (p[(1 * 8) + col] + p[(7 * 8) + col])) + 2048) >> 12;\n      v5 = p[(3 * 8) + col];\n      v6 = p[(5 * 8) + col];\n\n      // stage 3\n      t = (v0 - v1 + 1) >> 1;\n      v0 = (v0 + v1 + 1) >> 1;\n      v1 = t;\n      t = ((v2 * dctSin6) + (v3 * dctCos6) + 2048) >> 12;\n      v2 = ((v2 * dctCos6) - (v3 * dctSin6) + 2048) >> 12;\n      v3 = t;\n      t = (v4 - v6 + 1) >> 1;\n      v4 = (v4 + v6 + 1) >> 1;\n      v6 = t;\n      t = (v7 + v5 + 1) >> 1;\n      v5 = (v7 - v5 + 1) >> 1;\n      v7 = t;\n\n      // stage 2\n      t = (v0 - v3 + 1) >> 1;\n      v0 = (v0 + v3 + 1) >> 1;\n      v3 = t;\n      t = (v1 - v2 + 1) >> 1;\n      v1 = (v1 + v2 + 1) >> 1;\n      v2 = t;\n      t = ((v4 * dctSin3) + (v7 * dctCos3) + 2048) >> 12;\n      v4 = ((v4 * dctCos3) - (v7 * dctSin3) + 2048) >> 12;\n      v7 = t;\n      t = ((v5 * dctSin1) + (v6 * dctCos1) + 2048) >> 12;\n      v5 = ((v5 * dctCos1) - (v6 * dctSin1) + 2048) >> 12;\n      v6 = t;\n\n      // stage 1\n      p[(0 * 8) + col] = v0 + v7;\n      p[(7 * 8) + col] = v0 - v7;\n      p[(1 * 8) + col] = v1 + v6;\n      p[(6 * 8) + col] = v1 - v6;\n      p[(2 * 8) + col] = v2 + v5;\n      p[(5 * 8) + col] = v2 - v5;\n      p[(3 * 8) + col] = v3 + v4;\n      p[(4 * 8) + col] = v3 - v4;\n    }\n\n    // convert to 8-bit integers\n    for (i = 0; i < 64; ++i) {\n      const sample = 128 + ((p[i] + 8) >> 4);\n      if (sample < 0) {\n        dataOut[i] = 0;\n      } else if (sample > 0XFF) {\n        dataOut[i] = 0xFF;\n      } else {\n        dataOut[i] = sample;\n      }\n    }\n  }\n\n  for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n    const scanLine = blockRow << 3;\n    for (let i = 0; i < 8; i++) {\n      lines.push(new Uint8Array(samplesPerLine));\n    }\n    for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n      quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);\n\n      let offset = 0;\n      const sample = blockCol << 3;\n      for (let j = 0; j < 8; j++) {\n        const line = lines[scanLine + j];\n        for (let i = 0; i < 8; i++) {\n          line[sample + i] = r[offset++];\n        }\n      }\n    }\n  }\n  return lines;\n}\n\nclass JpegStreamReader {\n  constructor() {\n    this.jfif = null;\n    this.adobe = null;\n\n    this.quantizationTables = [];\n    this.huffmanTablesAC = [];\n    this.huffmanTablesDC = [];\n    this.resetFrames();\n  }\n\n  resetFrames() {\n    this.frames = [];\n  }\n\n  parse(data) {\n    let offset = 0;\n    // const { length } = data;\n    function readUint16() {\n      const value = (data[offset] << 8) | data[offset + 1];\n      offset += 2;\n      return value;\n    }\n    function readDataBlock() {\n      const length = readUint16();\n      const array = data.subarray(offset, offset + length - 2);\n      offset += array.length;\n      return array;\n    }\n    function prepareComponents(frame) {\n      let maxH = 0;\n      let maxV = 0;\n      let component;\n      let componentId;\n      for (componentId in frame.components) {\n        if (frame.components.hasOwnProperty(componentId)) {\n          component = frame.components[componentId];\n          if (maxH < component.h) {\n            maxH = component.h;\n          }\n          if (maxV < component.v) {\n            maxV = component.v;\n          }\n        }\n      }\n      const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);\n      const mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);\n      for (componentId in frame.components) {\n        if (frame.components.hasOwnProperty(componentId)) {\n          component = frame.components[componentId];\n          const blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);\n          const blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);\n          const blocksPerLineForMcu = mcusPerLine * component.h;\n          const blocksPerColumnForMcu = mcusPerColumn * component.v;\n          const blocks = [];\n          for (let i = 0; i < blocksPerColumnForMcu; i++) {\n            const row = [];\n            for (let j = 0; j < blocksPerLineForMcu; j++) {\n              row.push(new Int32Array(64));\n            }\n            blocks.push(row);\n          }\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n          component.blocks = blocks;\n        }\n      }\n      frame.maxH = maxH;\n      frame.maxV = maxV;\n      frame.mcusPerLine = mcusPerLine;\n      frame.mcusPerColumn = mcusPerColumn;\n    }\n\n    let fileMarker = readUint16();\n    if (fileMarker !== 0xFFD8) { // SOI (Start of Image)\n      throw new Error('SOI not found');\n    }\n\n    fileMarker = readUint16();\n    while (fileMarker !== 0xFFD9) { // EOI (End of image)\n      switch (fileMarker) {\n        case 0xFF00: break;\n        case 0xFFE0: // APP0 (Application Specific)\n        case 0xFFE1: // APP1\n        case 0xFFE2: // APP2\n        case 0xFFE3: // APP3\n        case 0xFFE4: // APP4\n        case 0xFFE5: // APP5\n        case 0xFFE6: // APP6\n        case 0xFFE7: // APP7\n        case 0xFFE8: // APP8\n        case 0xFFE9: // APP9\n        case 0xFFEA: // APP10\n        case 0xFFEB: // APP11\n        case 0xFFEC: // APP12\n        case 0xFFED: // APP13\n        case 0xFFEE: // APP14\n        case 0xFFEF: // APP15\n        case 0xFFFE: { // COM (Comment)\n          const appData = readDataBlock();\n\n          if (fileMarker === 0xFFE0) {\n            if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49\n              && appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n              this.jfif = {\n                version: { major: appData[5], minor: appData[6] },\n                densityUnits: appData[7],\n                xDensity: (appData[8] << 8) | appData[9],\n                yDensity: (appData[10] << 8) | appData[11],\n                thumbWidth: appData[12],\n                thumbHeight: appData[13],\n                thumbData: appData.subarray(14, 14 + (3 * appData[12] * appData[13])),\n              };\n            }\n          }\n          // TODO APP1 - Exif\n          if (fileMarker === 0xFFEE) {\n            if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F\n              && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n              this.adobe = {\n                version: appData[6],\n                flags0: (appData[7] << 8) | appData[8],\n                flags1: (appData[9] << 8) | appData[10],\n                transformCode: appData[11],\n              };\n            }\n          }\n          break;\n        }\n\n        case 0xFFDB: { // DQT (Define Quantization Tables)\n          const quantizationTablesLength = readUint16();\n          const quantizationTablesEnd = quantizationTablesLength + offset - 2;\n          while (offset < quantizationTablesEnd) {\n            const quantizationTableSpec = data[offset++];\n            const tableData = new Int32Array(64);\n            if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n              for (let j = 0; j < 64; j++) {\n                const z = dctZigZag[j];\n                tableData[z] = data[offset++];\n              }\n            } else if ((quantizationTableSpec >> 4) === 1) { // 16 bit\n              for (let j = 0; j < 64; j++) {\n                const z = dctZigZag[j];\n                tableData[z] = readUint16();\n              }\n            } else {\n              throw new Error('DQT: invalid table spec');\n            }\n            this.quantizationTables[quantizationTableSpec & 15] = tableData;\n          }\n          break;\n        }\n\n        case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n        case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n        case 0xFFC2: { // SOF2 (Start of Frame, Progressive DCT)\n          readUint16(); // skip data length\n          const frame = {\n            extended: (fileMarker === 0xFFC1),\n            progressive: (fileMarker === 0xFFC2),\n            precision: data[offset++],\n            scanLines: readUint16(),\n            samplesPerLine: readUint16(),\n            components: {},\n            componentsOrder: [],\n          };\n\n          const componentsCount = data[offset++];\n          let componentId;\n          // let maxH = 0;\n          // let maxV = 0;\n          for (let i = 0; i < componentsCount; i++) {\n            componentId = data[offset];\n            const h = data[offset + 1] >> 4;\n            const v = data[offset + 1] & 15;\n            const qId = data[offset + 2];\n            frame.componentsOrder.push(componentId);\n            frame.components[componentId] = {\n              h,\n              v,\n              quantizationIdx: qId,\n            };\n            offset += 3;\n          }\n          prepareComponents(frame);\n          this.frames.push(frame);\n          break;\n        }\n\n        case 0xFFC4: { // DHT (Define Huffman Tables)\n          const huffmanLength = readUint16();\n          for (let i = 2; i < huffmanLength;) {\n            const huffmanTableSpec = data[offset++];\n            const codeLengths = new Uint8Array(16);\n            let codeLengthSum = 0;\n            for (let j = 0; j < 16; j++, offset++) {\n              codeLengths[j] = data[offset];\n              codeLengthSum += codeLengths[j];\n            }\n            const huffmanValues = new Uint8Array(codeLengthSum);\n            for (let j = 0; j < codeLengthSum; j++, offset++) {\n              huffmanValues[j] = data[offset];\n            }\n            i += 17 + codeLengthSum;\n\n            if ((huffmanTableSpec >> 4) === 0) {\n              this.huffmanTablesDC[huffmanTableSpec & 15] = buildHuffmanTable(\n                codeLengths, huffmanValues,\n              );\n            } else {\n              this.huffmanTablesAC[huffmanTableSpec & 15] = buildHuffmanTable(\n                codeLengths, huffmanValues,\n              );\n            }\n          }\n          break;\n        }\n\n        case 0xFFDD: // DRI (Define Restart Interval)\n          readUint16(); // skip data length\n          this.resetInterval = readUint16();\n          break;\n\n        case 0xFFDA: { // SOS (Start of Scan)\n          readUint16(); // skip length\n          const selectorsCount = data[offset++];\n          const components = [];\n          const frame = this.frames[0];\n          for (let i = 0; i < selectorsCount; i++) {\n            const component = frame.components[data[offset++]];\n            const tableSpec = data[offset++];\n            component.huffmanTableDC = this.huffmanTablesDC[tableSpec >> 4];\n            component.huffmanTableAC = this.huffmanTablesAC[tableSpec & 15];\n            components.push(component);\n          }\n          const spectralStart = data[offset++];\n          const spectralEnd = data[offset++];\n          const successiveApproximation = data[offset++];\n          const processed = decodeScan(data, offset,\n            frame, components, this.resetInterval,\n            spectralStart, spectralEnd,\n            successiveApproximation >> 4, successiveApproximation & 15);\n          offset += processed;\n          break;\n        }\n\n        case 0xFFFF: // Fill bytes\n          if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\n            offset--;\n          }\n          break;\n\n        default:\n          if (data[offset - 3] === 0xFF\n            && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n            // could be incorrect encoding -- last 0xFF byte of the previous\n            // block was eaten by the encoder\n            offset -= 3;\n            break;\n          }\n          throw new Error(`unknown JPEG marker ${fileMarker.toString(16)}`);\n      }\n      fileMarker = readUint16();\n    }\n  }\n\n  getResult() {\n    const { frames } = this;\n    if (this.frames.length === 0) {\n      throw new Error('no frames were decoded');\n    } else if (this.frames.length > 1) {\n      console.warn('more than one frame is not supported');\n    }\n\n    // set each frame's components quantization table\n    for (let i = 0; i < this.frames.length; i++) {\n      const cp = this.frames[i].components;\n      for (const j of Object.keys(cp)) {\n        cp[j].quantizationTable = this.quantizationTables[cp[j].quantizationIdx];\n        delete cp[j].quantizationIdx;\n      }\n    }\n\n    const frame = frames[0];\n    const { components, componentsOrder } = frame;\n    const outComponents = [];\n    const width = frame.samplesPerLine;\n    const height = frame.scanLines;\n\n    for (let i = 0; i < componentsOrder.length; i++) {\n      const component = components[componentsOrder[i]];\n      outComponents.push({\n        lines: buildComponentData(frame, component),\n        scaleX: component.h / frame.maxH,\n        scaleY: component.v / frame.maxV,\n      });\n    }\n\n    const out = new Uint8Array(width * height * outComponents.length);\n    let oi = 0;\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        for (let i = 0; i < outComponents.length; ++i) {\n          const component = outComponents[i];\n          out[oi] = component.lines[0 | y * component.scaleY][0 | x * component.scaleX];\n          ++oi;\n        }\n      }\n    }\n    return out;\n  }\n}\n\nexport default class JpegDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    this.reader = new JpegStreamReader();\n    if (fileDirectory.JPEGTables) {\n      this.reader.parse(fileDirectory.JPEGTables);\n    }\n  }\n\n  decodeBlock(buffer) {\n    this.reader.resetFrames();\n    this.reader.parse(new Uint8Array(buffer));\n    return this.reader.getResult().buffer;\n  }\n}\n"],"sourceRoot":""}