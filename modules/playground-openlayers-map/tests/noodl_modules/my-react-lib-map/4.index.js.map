{"version":3,"sources":["webpack:///./node_modules/geotiff/dist-module/predictor.js","webpack:///./node_modules/geotiff/dist-module/compression/basedecoder.js","webpack:///./node_modules/geotiff/dist-module/compression/lzw.js"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","slice","b","applyPredictor","block","predictor","width","height","bitsPerSample","planarConfiguration","Error","byteLength","Uint8Array","Uint16Array","Uint32Array","concat","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","BaseDecoder","_createClass","_classCallCheck","_callee","fileDirectory","buffer","decoded","isTiled","tileWidth","tileHeight","_context","this","decodeBlock","Predictor","StripOffsets","TileWidth","ImageWidth","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration","_decode","arguments","apply","_next","_throw","_x","_x2","appendReversed","dest","source","decompress","input","dictionaryIndex","dictionaryChar","dictionaryLength","position","initDictionary","getNext","array","byte","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","pow","chunks","chunk2","hi","getByte","addToDictionary","getDictionaryReversed","rev","result","oldCode","code","val","oldVal","undefined","LZWDecoder","_BaseDecoder","_callSuper","_inherits"],"mappings":"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","file":"4.index.js","sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n","import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"],"sourceRoot":""}